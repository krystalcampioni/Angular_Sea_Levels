angular.module("weatherApp",["ngRoute","weatherApp.filters","weatherApp.services","weatherApp.directives","weatherApp.controllers","iso-3166-country-codes"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/forecast",{templateUrl:"forecast.html",controller:"OpenWeatherCtrl"}),$routeProvider.otherwise({redirectTo:"/forecast"})}]);
angular.module("weatherApp.services",["ngResource"]).value("cities",["Amsterdam, NL","London, UK","Berlin, DE","Paris, FR","Madrid, ES"]).factory("openWeatherMap",function($resource){var apiKey="0ecce192500d1a71eb05d1ef815147cc",apiBaseUrl="http://api.openweathermap.org/data/2.5/";return $resource(apiBaseUrl+":path/:subPath?q=:location",{APPID:apiKey,mode:"json",callback:"JSON_CALLBACK",units:"metric",lang:"en"},{queryWeather:{method:"JSONP",params:{path:"weather"},isArray:!1,headers:{"x-api-key":apiKey}},queryForecast:{method:"JSONP",params:{path:"forecast",cnt:5},isArray:!1,headers:{"x-api-key":apiKey}}})});
angular.module("weatherApp.controllers",[]).controller("OpenWeatherCtrl",["$scope","openWeatherMap","cities",function($scope,openWeatherMap,cities){$scope.message="",$scope.cities=cities,$scope.forecast=openWeatherMap.queryForecast({location:cities[0]}),$scope.currentWeather=openWeatherMap.queryWeather({location:cities[0]}),$scope.getForecastByLocation=function(){$scope.forecast=openWeatherMap.queryForecast({location:$scope.location}),$scope.currentWeather=openWeatherMap.queryWeather({location:$scope.location})},$scope.setLocation=function(loc){$scope.location=loc,$scope.getForecastByLocation()}}]);
angular.module("weatherApp.filters",[]).filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}}]).filter("placeholder",[function(){return function(input,phvalue){return angular.isUndefined(input)||""==input?phvalue:input}}]);
angular.module("weatherApp.directives",[]).directive("forecastItem",[function(){return{scope:{useDayForecast:"=showEntry",forecast:"=forecastItem"},templateUrl:"_forecast-item.html",link:function(scope,element,attrs){scope.isNine=function(dt_txt){return _.includes(dt_txt,"09:00")},scope.calculateSeaRise=function(sea,ground){if(sea-ground>0){var positiveNumber="+"+(sea-ground).toString();return positiveNumber}return sea-ground}}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzLmpzIiwiY29udHJvbGxlcnMuanMiLCJmaWx0ZXJzLmpzIiwiZGlyZWN0aXZlcy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsInZhbHVlIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsImFwaUtleSIsImFwaUJhc2VVcmwiLCJBUFBJRCIsIm1vZGUiLCJjYWxsYmFjayIsInVuaXRzIiwibGFuZyIsInF1ZXJ5V2VhdGhlciIsIm1ldGhvZCIsInBhcmFtcyIsInBhdGgiLCJpc0FycmF5IiwiaGVhZGVycyIsIngtYXBpLWtleSIsInF1ZXJ5Rm9yZWNhc3QiLCJjbnQiLCIkc2NvcGUiLCJvcGVuV2VhdGhlck1hcCIsImNpdGllcyIsIm1lc3NhZ2UiLCJmb3JlY2FzdCIsImxvY2F0aW9uIiwiY3VycmVudFdlYXRoZXIiLCJnZXRGb3JlY2FzdEJ5TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsImxvYyIsImZpbHRlciIsInZlcnNpb24iLCJ0ZXh0IiwiU3RyaW5nIiwicmVwbGFjZSIsImlucHV0IiwicGh2YWx1ZSIsImlzVW5kZWZpbmVkIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJ1c2VEYXlGb3JlY2FzdCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJpc05pbmUiLCJkdF90eHQiLCJfIiwiaW5jbHVkZXMiLCJjYWxjdWxhdGVTZWFSaXNlIiwic2VhIiwiZ3JvdW5kIiwicG9zaXRpdmVOdW1iZXIiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLE9BQU8sY0FDYixVQUNBLHFCQUNBLHNCQUNBLHdCQUNBLHlCQUNBLDJCQUVGQyxRQUFRLGlCQUFrQixTQUFTQyxnQkFDakNBLGVBQWVDLEtBQUssYUFBY0MsWUFBYSxnQkFBaUJDLFdBQVksb0JBQzVFSCxlQUFlSSxXQUFXQyxXQUFZO0FDVnhDUixRQUFRQyxPQUFPLHVCQUF3QixlQUNwQ1EsTUFBTSxVQUFVLGdCQUFnQixhQUFhLGFBQWEsWUFBWSxlQUV0RUMsUUFBUSxpQkFBa0IsU0FBU0MsV0FFbEMsR0FBSUMsUUFBUyxtQ0FDVEMsV0FBYSx5Q0FFakIsT0FBT0YsV0FBVUUsV0FBYSw4QkFFMUJDLE1BQU9GLE9BQ1BHLEtBQU0sT0FDTkMsU0FBVSxnQkFDVkMsTUFBTyxTQUNQQyxLQUFNLE9BR05DLGNBQ0VDLE9BQVEsUUFDUkMsUUFDRUMsS0FBTSxXQUVSQyxTQUFTLEVBQ1RDLFNBQ0VDLFlBQWFiLFNBR2pCYyxlQUNFTixPQUFRLFFBQ1JDLFFBQ0VDLEtBQU0sV0FDTkssSUFBSyxHQUVQSixTQUFTLEVBQ1RDLFNBQ0VDLFlBQWFiO0FDbkN6QlosUUFBUUMsT0FBTyw2QkFDWkssV0FBVyxtQkFDVCxTQUFTLGlCQUFpQixTQUN6QixTQUFTc0IsT0FBT0MsZUFBZUMsUUFFakNGLE9BQU9HLFFBQVUsR0FFakJILE9BQU9FLE9BQVNBLE9BR2hCRixPQUFPSSxTQUFXSCxlQUFlSCxlQUMvQk8sU0FBVUgsT0FBUSxLQUlwQkYsT0FBT00sZUFBaUJMLGVBQWVWLGNBQ3JDYyxTQUFVSCxPQUFRLEtBR3BCRixPQUFPTyxzQkFBd0IsV0FDN0JQLE9BQU9JLFNBQVdILGVBQWVILGVBQy9CTyxTQUFVTCxPQUFPSyxXQUVuQkwsT0FBT00sZUFBaUJMLGVBQWVWLGNBQ3JDYyxTQUFVTCxPQUFPSyxZQUtyQkwsT0FBT1EsWUFBYyxTQUFTQyxLQUM1QlQsT0FBT0ssU0FBV0ksSUFDbEJULE9BQU9PO0FDL0JibkMsUUFBUUMsT0FBTyx5QkFFWnFDLE9BQU8sZUFBZ0IsVUFBVyxTQUFTQyxTQUMxQyxNQUFPLFVBQVNDLE1BQ2QsTUFBT0MsUUFBT0QsTUFBTUUsUUFBUSxnQkFBaUJILGFBSWhERCxPQUFPLGVBQWdCLFdBQ3RCLE1BQU8sVUFBVUssTUFBTUMsU0FDckIsTUFBUTVDLFNBQVE2QyxZQUFZRixRQUFtQixJQUFUQSxNQUFlQyxRQUFVRDtBQ1ZyRTNDLFFBQVFDLE9BQU8sNEJBQ1o2QyxVQUFVLGdCQUFnQixXQUN6QixPQUNFQyxPQUNFQyxlQUFnQixhQUNoQmhCLFNBQVUsaUJBR1ozQixZQUFhLHNCQUViNEMsS0FBTSxTQUFTRixNQUFPRyxRQUFTQyxPQUM3QkosTUFBTUssT0FBUyxTQUFTQyxRQUN0QixNQUFPQyxHQUFFQyxTQUFTRixPQUFRLFVBRzVCTixNQUFNUyxpQkFBbUIsU0FBU0MsSUFBS0MsUUFDckMsR0FBSUQsSUFBTUMsT0FBUyxFQUFHLENBQ3BCLEdBQUlDLGdCQUFpQixLQUFPRixJQUFJQyxRQUFRRSxVQUN4QyxPQUFPRCxnQkFHUCxNQUFPRixLQUFNQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3dlYXRoZXJBcHAnLCBbXG4gICduZ1JvdXRlJyxcbiAgJ3dlYXRoZXJBcHAuZmlsdGVycycsXG4gICd3ZWF0aGVyQXBwLnNlcnZpY2VzJyxcbiAgJ3dlYXRoZXJBcHAuZGlyZWN0aXZlcycsXG4gICd3ZWF0aGVyQXBwLmNvbnRyb2xsZXJzJyxcbiAgXCJpc28tMzE2Ni1jb3VudHJ5LWNvZGVzXCJcbl0pLlxuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlci53aGVuKCcvZm9yZWNhc3QnLCB7dGVtcGxhdGVVcmw6ICdmb3JlY2FzdC5odG1sJywgY29udHJvbGxlcjogJ09wZW5XZWF0aGVyQ3RybCd9KTtcbiAgJHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlKHtyZWRpcmVjdFRvOiAnL2ZvcmVjYXN0J30pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3dlYXRoZXJBcHAuc2VydmljZXMnLCBbJ25nUmVzb3VyY2UnXSlcbiAgLnZhbHVlKCdjaXRpZXMnLFsnQW1zdGVyZGFtLCBOTCcsJ0xvbmRvbiwgVUsnLCdCZXJsaW4sIERFJywnUGFyaXMsIEZSJywnTWFkcmlkLCBFUyddKVxuXG4gIC5mYWN0b3J5KCdvcGVuV2VhdGhlck1hcCcsIGZ1bmN0aW9uKCRyZXNvdXJjZSkge1xuXG4gICAgdmFyIGFwaUtleSA9ICcwZWNjZTE5MjUwMGQxYTcxZWIwNWQxZWY4MTUxNDdjYyc7XG4gICAgdmFyIGFwaUJhc2VVcmwgPSAnaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvJztcblxuICAgIHJldHVybiAkcmVzb3VyY2UoYXBpQmFzZVVybCArICc6cGF0aC86c3ViUGF0aD9xPTpsb2NhdGlvbicsXG4gICAgICB7XG4gICAgICAgIEFQUElEOiBhcGlLZXksXG4gICAgICAgIG1vZGU6ICdqc29uJyxcbiAgICAgICAgY2FsbGJhY2s6ICdKU09OX0NBTExCQUNLJyxcbiAgICAgICAgdW5pdHM6ICdtZXRyaWMnLFxuICAgICAgICBsYW5nOiAnZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBxdWVyeVdlYXRoZXI6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnd2VhdGhlcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBhcGlLZXlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5Rm9yZWNhc3Q6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnZm9yZWNhc3QnLFxuICAgICAgICAgICAgY250OiA1XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAneC1hcGkta2V5JzogYXBpS2V5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfVxuICAgIClcbiAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5jb250cm9sbGVycycsIFtdKVxuICAuY29udHJvbGxlcignT3BlbldlYXRoZXJDdHJsJyxcbiAgICBbJyRzY29wZScsJ29wZW5XZWF0aGVyTWFwJywnY2l0aWVzJyxcbiAgICAgIGZ1bmN0aW9uKCRzY29wZSxvcGVuV2VhdGhlck1hcCxjaXRpZXMpIHtcblxuICAgICRzY29wZS5tZXNzYWdlID0gJyc7XG5cbiAgICAkc2NvcGUuY2l0aWVzID0gY2l0aWVzO1xuXG4gICAgLy8gR2V0IGZvcmVjYXN0IGZvciBzZWEgbGV2ZWxzIG1vZGFsXG4gICAgJHNjb3BlLmZvcmVjYXN0ID0gb3BlbldlYXRoZXJNYXAucXVlcnlGb3JlY2FzdCh7XG4gICAgICBsb2NhdGlvbjogY2l0aWVzWyAwIF1cbiAgICB9KTtcblxuICAgIC8vIEdldCB3ZWF0aGVyIGluZm8gZm9yIGluaXRpYWwgcGFnZVxuICAgICRzY29wZS5jdXJyZW50V2VhdGhlciA9IG9wZW5XZWF0aGVyTWFwLnF1ZXJ5V2VhdGhlcih7XG4gICAgICBsb2NhdGlvbjogY2l0aWVzWyAwIF1cbiAgICB9KTtcblxuICAgICRzY29wZS5nZXRGb3JlY2FzdEJ5TG9jYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICRzY29wZS5mb3JlY2FzdCA9IG9wZW5XZWF0aGVyTWFwLnF1ZXJ5Rm9yZWNhc3Qoe1xuICAgICAgICBsb2NhdGlvbjogJHNjb3BlLmxvY2F0aW9uXG4gICAgICB9KTtcbiAgICAgICRzY29wZS5jdXJyZW50V2VhdGhlciA9IG9wZW5XZWF0aGVyTWFwLnF1ZXJ5V2VhdGhlcih7XG4gICAgICAgIGxvY2F0aW9uOiAkc2NvcGUubG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBDaGFuZ2UgY3VycmVudCBsb2NhdGlvbiBvbiBidXR0b25zIGNsaWNrc1xuICAgICRzY29wZS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKGxvYykge1xuICAgICAgJHNjb3BlLmxvY2F0aW9uID0gbG9jO1xuICAgICAgJHNjb3BlLmdldEZvcmVjYXN0QnlMb2NhdGlvbigpO1xuICAgIH07XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCd3ZWF0aGVyQXBwLmZpbHRlcnMnLCBbXSlcblxuICAuZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICAgICAgcmV0dXJuIFN0cmluZyh0ZXh0KS5yZXBsYWNlKC9cXCVWRVJTSU9OXFwlL21nLCB2ZXJzaW9uKTtcbiAgICB9XG4gIH1dKVxuXG4gIC5maWx0ZXIoJ3BsYWNlaG9sZGVyJywgW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQscGh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChhbmd1bGFyLmlzVW5kZWZpbmVkKGlucHV0KSB8fCBpbnB1dCA9PSAnJykgPyBwaHZhbHVlIDogaW5wdXQ7XG4gICAgfTtcbiAgfV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5kaXJlY3RpdmVzJywgW10pXG4gIC5kaXJlY3RpdmUoJ2ZvcmVjYXN0SXRlbScsW2Z1bmN0aW9uIGZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHVzZURheUZvcmVjYXN0OiAnPXNob3dFbnRyeScsXG4gICAgICAgIGZvcmVjYXN0OiAnPWZvcmVjYXN0SXRlbScsXG4gICAgICB9LFxuXG4gICAgICB0ZW1wbGF0ZVVybDogJ19mb3JlY2FzdC1pdGVtLmh0bWwnLFxuXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUuaXNOaW5lID0gZnVuY3Rpb24oZHRfdHh0KXtcbiAgICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyhkdF90eHQsICcwOTowMCcpXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuY2FsY3VsYXRlU2VhUmlzZSA9IGZ1bmN0aW9uKHNlYSwgZ3JvdW5kKXtcbiAgICAgICAgICBpZiAoc2VhIC0gZ3JvdW5kID4gMCkge1xuICAgICAgICAgICAgdmFyIHBvc2l0aXZlTnVtYmVyID0gJysnICsgKHNlYS1ncm91bmQpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpdmVOdW1iZXJcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2VhIC0gZ3JvdW5kXG4gICAgICAgICAgfVxuXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XSlcbiJdfQ==
