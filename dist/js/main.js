angular.module("weatherApp",["ngRoute","weatherApp.filters","weatherApp.services","weatherApp.directives","weatherApp.controllers","iso-3166-country-codes"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/forecast",{templateUrl:"forecast.html",controller:"OpenWeatherCtrl"}),$routeProvider.otherwise({redirectTo:"/forecast"})}]);
angular.module("weatherApp.services",["ngResource"]).value("cities",["Amsterdam, NL","London, UK","Berlin, DE","Paris, FR","Madrid, ES"]).factory("openWeatherMap",function($resource){var apiKey="0ecce192500d1a71eb05d1ef815147cc",apiBaseUrl="http://api.openweathermap.org/data/2.5/";return $resource(apiBaseUrl+":path/:subPath?q=:location",{APPID:apiKey,mode:"json",callback:"JSON_CALLBACK",units:"metric",lang:"en"},{queryWeather:{method:"JSONP",params:{path:"weather"},isArray:!1,headers:{"x-api-key":apiKey}},queryForecast:{method:"JSONP",params:{path:"forecast",cnt:5},isArray:!1,headers:{"x-api-key":apiKey}}})});
angular.module("weatherApp.controllers",[]).controller("OpenWeatherCtrl",["$scope","openWeatherMap","cities",function($scope,openWeatherMap,cities){$scope.message="",$scope.cities=cities,$scope.forecast=openWeatherMap.queryForecast({location:cities[0]}),$scope.currentWeather=openWeatherMap.queryWeather({location:cities[0]}),$scope.getForecastByLocation=function(){$scope.forecast=openWeatherMap.queryForecast({location:$scope.location}),$scope.currentWeather=openWeatherMap.queryWeather({location:$scope.location})},$scope.setLocation=function(loc){$scope.location=loc,$scope.getForecastByLocation()}}]);
angular.module("weatherApp.filters",[]).filter("placeholder",[function(){return function(input,phvalue){return angular.isUndefined(input)||""==input?phvalue:input}}]);
angular.module("weatherApp.directives",[]).directive("forecastItem",[function(){return{scope:{useDayForecast:"=showEntry",forecast:"=forecastItem"},templateUrl:"_forecast-item.html",link:function(scope,element,attrs){scope.isNine=function(dt_txt){return _.includes(dt_txt,"09:00")},scope.calculateSeaRise=function(sea,ground){if(sea-ground>0){var positiveNumber="+"+(sea-ground).toString();return positiveNumber}return sea-ground}}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzLmpzIiwiY29udHJvbGxlcnMuanMiLCJmaWx0ZXJzLmpzIiwiZGlyZWN0aXZlcy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsInZhbHVlIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsImFwaUtleSIsImFwaUJhc2VVcmwiLCJBUFBJRCIsIm1vZGUiLCJjYWxsYmFjayIsInVuaXRzIiwibGFuZyIsInF1ZXJ5V2VhdGhlciIsIm1ldGhvZCIsInBhcmFtcyIsInBhdGgiLCJpc0FycmF5IiwiaGVhZGVycyIsIngtYXBpLWtleSIsInF1ZXJ5Rm9yZWNhc3QiLCJjbnQiLCIkc2NvcGUiLCJvcGVuV2VhdGhlck1hcCIsImNpdGllcyIsIm1lc3NhZ2UiLCJmb3JlY2FzdCIsImxvY2F0aW9uIiwiY3VycmVudFdlYXRoZXIiLCJnZXRGb3JlY2FzdEJ5TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsImxvYyIsImZpbHRlciIsImlucHV0IiwicGh2YWx1ZSIsImlzVW5kZWZpbmVkIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJ1c2VEYXlGb3JlY2FzdCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJpc05pbmUiLCJkdF90eHQiLCJfIiwiaW5jbHVkZXMiLCJjYWxjdWxhdGVTZWFSaXNlIiwic2VhIiwiZ3JvdW5kIiwicG9zaXRpdmVOdW1iZXIiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLE9BQU8sY0FDYixVQUNBLHFCQUNBLHNCQUNBLHdCQUNBLHlCQUNBLDJCQUVGQyxRQUFRLGlCQUFrQixTQUFTQyxnQkFDakNBLGVBQWVDLEtBQUssYUFBY0MsWUFBYSxnQkFBaUJDLFdBQVksb0JBQzVFSCxlQUFlSSxXQUFXQyxXQUFZO0FDVnhDUixRQUFRQyxPQUFPLHVCQUF3QixlQUNwQ1EsTUFBTSxVQUFVLGdCQUFnQixhQUFhLGFBQWEsWUFBWSxlQUV0RUMsUUFBUSxpQkFBa0IsU0FBU0MsV0FFbEMsR0FBSUMsUUFBUyxtQ0FDVEMsV0FBYSx5Q0FFakIsT0FBT0YsV0FBVUUsV0FBYSw4QkFFMUJDLE1BQU9GLE9BQ1BHLEtBQU0sT0FDTkMsU0FBVSxnQkFDVkMsTUFBTyxTQUNQQyxLQUFNLE9BR05DLGNBQ0VDLE9BQVEsUUFDUkMsUUFDRUMsS0FBTSxXQUVSQyxTQUFTLEVBQ1RDLFNBQ0VDLFlBQWFiLFNBR2pCYyxlQUNFTixPQUFRLFFBQ1JDLFFBQ0VDLEtBQU0sV0FDTkssSUFBSyxHQUVQSixTQUFTLEVBQ1RDLFNBQ0VDLFlBQWFiO0FDbkN6QlosUUFBUUMsT0FBTyw2QkFDWkssV0FBVyxtQkFDVCxTQUFTLGlCQUFpQixTQUN6QixTQUFTc0IsT0FBT0MsZUFBZUMsUUFFakNGLE9BQU9HLFFBQVUsR0FFakJILE9BQU9FLE9BQVNBLE9BR2hCRixPQUFPSSxTQUFXSCxlQUFlSCxlQUMvQk8sU0FBVUgsT0FBUSxLQUlwQkYsT0FBT00sZUFBaUJMLGVBQWVWLGNBQ3JDYyxTQUFVSCxPQUFRLEtBR3BCRixPQUFPTyxzQkFBd0IsV0FDN0JQLE9BQU9JLFNBQVdILGVBQWVILGVBQy9CTyxTQUFVTCxPQUFPSyxXQUVuQkwsT0FBT00sZUFBaUJMLGVBQWVWLGNBQ3JDYyxTQUFVTCxPQUFPSyxZQUtyQkwsT0FBT1EsWUFBYyxTQUFTQyxLQUM1QlQsT0FBT0ssU0FBV0ksSUFDbEJULE9BQU9PO0FDL0JibkMsUUFBUUMsT0FBTyx5QkFDWnFDLE9BQU8sZUFBZ0IsV0FDdEIsTUFBTyxVQUFVQyxNQUFNQyxTQUNyQixNQUFReEMsU0FBUXlDLFlBQVlGLFFBQW1CLElBQVRBLE1BQWVDLFFBQVVEO0FDSHJFdkMsUUFBUUMsT0FBTyw0QkFDWnlDLFVBQVUsZ0JBQWdCLFdBQ3pCLE9BQ0VDLE9BQ0VDLGVBQWdCLGFBQ2hCWixTQUFVLGlCQUdaM0IsWUFBYSxzQkFFYndDLEtBQU0sU0FBU0YsTUFBT0csUUFBU0MsT0FDN0JKLE1BQU1LLE9BQVMsU0FBU0MsUUFDdEIsTUFBT0MsR0FBRUMsU0FBU0YsT0FBUSxVQUc1Qk4sTUFBTVMsaUJBQW1CLFNBQVNDLElBQUtDLFFBQ3JDLEdBQUlELElBQU1DLE9BQVMsRUFBRyxDQUNwQixHQUFJQyxnQkFBaUIsS0FBT0YsSUFBSUMsUUFBUUUsVUFDeEMsT0FBT0QsZ0JBR1AsTUFBT0YsS0FBTUMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCd3ZWF0aGVyQXBwJywgW1xuICAnbmdSb3V0ZScsXG4gICd3ZWF0aGVyQXBwLmZpbHRlcnMnLFxuICAnd2VhdGhlckFwcC5zZXJ2aWNlcycsXG4gICd3ZWF0aGVyQXBwLmRpcmVjdGl2ZXMnLFxuICAnd2VhdGhlckFwcC5jb250cm9sbGVycycsXG4gIFwiaXNvLTMxNjYtY291bnRyeS1jb2Rlc1wiXG5dKS5cbmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHtcbiAgJHJvdXRlUHJvdmlkZXIud2hlbignL2ZvcmVjYXN0Jywge3RlbXBsYXRlVXJsOiAnZm9yZWNhc3QuaHRtbCcsIGNvbnRyb2xsZXI6ICdPcGVuV2VhdGhlckN0cmwnfSk7XG4gICRyb3V0ZVByb3ZpZGVyLm90aGVyd2lzZSh7cmVkaXJlY3RUbzogJy9mb3JlY2FzdCd9KTtcbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCd3ZWF0aGVyQXBwLnNlcnZpY2VzJywgWyduZ1Jlc291cmNlJ10pXG4gIC52YWx1ZSgnY2l0aWVzJyxbJ0Ftc3RlcmRhbSwgTkwnLCdMb25kb24sIFVLJywnQmVybGluLCBERScsJ1BhcmlzLCBGUicsJ01hZHJpZCwgRVMnXSlcblxuICAuZmFjdG9yeSgnb3BlbldlYXRoZXJNYXAnLCBmdW5jdGlvbigkcmVzb3VyY2UpIHtcblxuICAgIHZhciBhcGlLZXkgPSAnMGVjY2UxOTI1MDBkMWE3MWViMDVkMWVmODE1MTQ3Y2MnO1xuICAgIHZhciBhcGlCYXNlVXJsID0gJ2h0dHA6Ly9hcGkub3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41Lyc7XG5cbiAgICByZXR1cm4gJHJlc291cmNlKGFwaUJhc2VVcmwgKyAnOnBhdGgvOnN1YlBhdGg/cT06bG9jYXRpb24nLFxuICAgICAge1xuICAgICAgICBBUFBJRDogYXBpS2V5LFxuICAgICAgICBtb2RlOiAnanNvbicsXG4gICAgICAgIGNhbGxiYWNrOiAnSlNPTl9DQUxMQkFDSycsXG4gICAgICAgIHVuaXRzOiAnbWV0cmljJyxcbiAgICAgICAgbGFuZzogJ2VuJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcXVlcnlXZWF0aGVyOiB7XG4gICAgICAgICAgbWV0aG9kOiAnSlNPTlAnLFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgcGF0aDogJ3dlYXRoZXInXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAneC1hcGkta2V5JzogYXBpS2V5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBxdWVyeUZvcmVjYXN0OiB7XG4gICAgICAgICAgbWV0aG9kOiAnSlNPTlAnLFxuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgcGF0aDogJ2ZvcmVjYXN0JyxcbiAgICAgICAgICAgIGNudDogNVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNBcnJheTogZmFsc2UsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3gtYXBpLWtleSc6IGFwaUtleVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApXG4gIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3dlYXRoZXJBcHAuY29udHJvbGxlcnMnLCBbXSlcbiAgLmNvbnRyb2xsZXIoJ09wZW5XZWF0aGVyQ3RybCcsXG4gICAgWyckc2NvcGUnLCdvcGVuV2VhdGhlck1hcCcsJ2NpdGllcycsXG4gICAgICBmdW5jdGlvbigkc2NvcGUsb3BlbldlYXRoZXJNYXAsY2l0aWVzKSB7XG5cbiAgICAkc2NvcGUubWVzc2FnZSA9ICcnO1xuXG4gICAgJHNjb3BlLmNpdGllcyA9IGNpdGllcztcblxuICAgIC8vIEdldCBmb3JlY2FzdCBmb3Igc2VhIGxldmVscyBtb2RhbFxuICAgICRzY29wZS5mb3JlY2FzdCA9IG9wZW5XZWF0aGVyTWFwLnF1ZXJ5Rm9yZWNhc3Qoe1xuICAgICAgbG9jYXRpb246IGNpdGllc1sgMCBdXG4gICAgfSk7XG5cbiAgICAvLyBHZXQgd2VhdGhlciBpbmZvIGZvciBpbml0aWFsIHBhZ2VcbiAgICAkc2NvcGUuY3VycmVudFdlYXRoZXIgPSBvcGVuV2VhdGhlck1hcC5xdWVyeVdlYXRoZXIoe1xuICAgICAgbG9jYXRpb246IGNpdGllc1sgMCBdXG4gICAgfSk7XG5cbiAgICAkc2NvcGUuZ2V0Rm9yZWNhc3RCeUxvY2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUuZm9yZWNhc3QgPSBvcGVuV2VhdGhlck1hcC5xdWVyeUZvcmVjYXN0KHtcbiAgICAgICAgbG9jYXRpb246ICRzY29wZS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgICAkc2NvcGUuY3VycmVudFdlYXRoZXIgPSBvcGVuV2VhdGhlck1hcC5xdWVyeVdlYXRoZXIoe1xuICAgICAgICBsb2NhdGlvbjogJHNjb3BlLmxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gQ2hhbmdlIGN1cnJlbnQgbG9jYXRpb24gb24gYnV0dG9ucyBjbGlja3NcbiAgICAkc2NvcGUuc2V0TG9jYXRpb24gPSBmdW5jdGlvbihsb2MpIHtcbiAgICAgICRzY29wZS5sb2NhdGlvbiA9IGxvYztcbiAgICAgICRzY29wZS5nZXRGb3JlY2FzdEJ5TG9jYXRpb24oKTtcbiAgICB9O1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5maWx0ZXJzJywgW10pXG4gIC5maWx0ZXIoJ3BsYWNlaG9sZGVyJywgW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQscGh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChhbmd1bGFyLmlzVW5kZWZpbmVkKGlucHV0KSB8fCBpbnB1dCA9PSAnJykgPyBwaHZhbHVlIDogaW5wdXQ7XG4gICAgfTtcbiAgfV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5kaXJlY3RpdmVzJywgW10pXG4gIC5kaXJlY3RpdmUoJ2ZvcmVjYXN0SXRlbScsW2Z1bmN0aW9uIGZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHVzZURheUZvcmVjYXN0OiAnPXNob3dFbnRyeScsXG4gICAgICAgIGZvcmVjYXN0OiAnPWZvcmVjYXN0SXRlbScsXG4gICAgICB9LFxuXG4gICAgICB0ZW1wbGF0ZVVybDogJ19mb3JlY2FzdC1pdGVtLmh0bWwnLFxuXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUuaXNOaW5lID0gZnVuY3Rpb24oZHRfdHh0KXtcbiAgICAgICAgICByZXR1cm4gXy5pbmNsdWRlcyhkdF90eHQsICcwOTowMCcpXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuY2FsY3VsYXRlU2VhUmlzZSA9IGZ1bmN0aW9uKHNlYSwgZ3JvdW5kKXtcbiAgICAgICAgICBpZiAoc2VhIC0gZ3JvdW5kID4gMCkge1xuICAgICAgICAgICAgdmFyIHBvc2l0aXZlTnVtYmVyID0gJysnICsgKHNlYS1ncm91bmQpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpdmVOdW1iZXJcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc2VhIC0gZ3JvdW5kXG4gICAgICAgICAgfVxuXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XSlcbiJdfQ==
