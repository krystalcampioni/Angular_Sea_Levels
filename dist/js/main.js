angular.module("weatherApp",["ngRoute","weatherApp.filters","weatherApp.services","weatherApp.directives","weatherApp.controllers","iso-3166-country-codes"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/forecast",{templateUrl:"forecast.html",controller:"OpenWeatherCtrl"}),$routeProvider.otherwise({redirectTo:"/forecast"})}]);
angular.module("weatherApp.services",["ngResource"]).value("cities",["Amsterdam","London","Berlin","Paris","Madrid"]).factory("openWeatherMap",function($resource){var apiKey="0ecce192500d1a71eb05d1ef815147cc",apiBaseUrl="http://api.openweathermap.org/data/2.5/";return $resource(apiBaseUrl+":path/:subPath?q=:location",{APPID:apiKey,mode:"json",callback:"JSON_CALLBACK",units:"metric",lang:"en"},{queryWeather:{method:"JSONP",params:{path:"weather"},isArray:!1,headers:{"x-api-key":apiKey}},queryForecast:{method:"JSONP",params:{path:"forecast"},isArray:!1,headers:{"x-api-key":apiKey}},queryForecastDaily:{method:"JSONP",params:{path:"forecast",subPath:"daily",cnt:7},isArray:!1,headers:{"x-api-key":apiKey}}})});
angular.module("weatherApp.controllers",[]).controller("OpenWeatherCtrl",["$scope","openWeatherMap","cities","ISO3166",function($scope,openWeatherMap,cities,ISO3166){$scope.message="",$scope.hasState="",$scope.cities=cities,$scope.iconBaseUrl="http://openweathermap.org/img/w/",$scope.forecast=openWeatherMap.queryForecastDaily({location:cities[0]}),$scope.getForecastByLocation=function(){$scope.forecast=openWeatherMap.queryForecastDaily({location:$scope.location})},$scope.setLocation=function(loc){$scope.location=loc,$scope.getForecastByLocation()},$scope.getIconImageUrl=function(iconName){return iconName?$scope.iconBaseUrl+iconName+".png":""}}]);
angular.module("weatherApp.filters",[]).filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}}]).filter("placeholder",[function(){return function(input,phvalue){return angular.isUndefined(input)||""==input?phvalue:input}}]);
angular.module("weatherApp.directives",[]).directive("forecastItem",[function(){return{scope:{useDayForecast:"=showEntry",forecast:"=forecastItem"},templateUrl:"_forecast-item.html",link:function(scope,element,attrs){scope.getIconImageUrl=function(iconName){return iconName?"http://openweathermap.org/img/w/"+iconName+".png":""},scope.parseDate=function(time){return new Date(1e3*time)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzLmpzIiwiY29udHJvbGxlcnMuanMiLCJmaWx0ZXJzLmpzIiwiZGlyZWN0aXZlcy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsInZhbHVlIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsImFwaUtleSIsImFwaUJhc2VVcmwiLCJBUFBJRCIsIm1vZGUiLCJjYWxsYmFjayIsInVuaXRzIiwibGFuZyIsInF1ZXJ5V2VhdGhlciIsIm1ldGhvZCIsInBhcmFtcyIsInBhdGgiLCJpc0FycmF5IiwiaGVhZGVycyIsIngtYXBpLWtleSIsInF1ZXJ5Rm9yZWNhc3QiLCJxdWVyeUZvcmVjYXN0RGFpbHkiLCJzdWJQYXRoIiwiY250IiwiJHNjb3BlIiwib3BlbldlYXRoZXJNYXAiLCJjaXRpZXMiLCJJU08zMTY2IiwibWVzc2FnZSIsImhhc1N0YXRlIiwiaWNvbkJhc2VVcmwiLCJmb3JlY2FzdCIsImxvY2F0aW9uIiwiZ2V0Rm9yZWNhc3RCeUxvY2F0aW9uIiwic2V0TG9jYXRpb24iLCJsb2MiLCJnZXRJY29uSW1hZ2VVcmwiLCJpY29uTmFtZSIsImZpbHRlciIsInZlcnNpb24iLCJ0ZXh0IiwiU3RyaW5nIiwicmVwbGFjZSIsImlucHV0IiwicGh2YWx1ZSIsImlzVW5kZWZpbmVkIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJ1c2VEYXlGb3JlY2FzdCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJwYXJzZURhdGUiLCJ0aW1lIiwiRGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVFDLE9BQU8sY0FDYixVQUNBLHFCQUNBLHNCQUNBLHdCQUNBLHlCQUNBLDJCQUVGQyxRQUFRLGlCQUFrQixTQUFTQyxnQkFDakNBLGVBQWVDLEtBQUssYUFBY0MsWUFBYSxnQkFBaUJDLFdBQVksb0JBQzVFSCxlQUFlSSxXQUFXQyxXQUFZO0FDVnhDUixRQUFRQyxPQUFPLHVCQUF3QixlQUNwQ1EsTUFBTSxVQUFVLFlBQVksU0FBUyxTQUFTLFFBQVEsV0FFdERDLFFBQVEsaUJBQWtCLFNBQVNDLFdBRWxDLEdBQUlDLFFBQVMsbUNBQ1RDLFdBQWEseUNBRWpCLE9BQU9GLFdBQVVFLFdBQWEsOEJBRTFCQyxNQUFPRixPQUNQRyxLQUFNLE9BQ05DLFNBQVUsZ0JBQ1ZDLE1BQU8sU0FDUEMsS0FBTSxPQUdOQyxjQUNFQyxPQUFRLFFBQ1JDLFFBQ0VDLEtBQU0sV0FFUkMsU0FBUyxFQUNUQyxTQUNFQyxZQUFhYixTQUdqQmMsZUFDRU4sT0FBUSxRQUNSQyxRQUNFQyxLQUFNLFlBRVJDLFNBQVMsRUFDVEMsU0FDRUMsWUFBYWIsU0FHakJlLG9CQUNFUCxPQUFRLFFBQ1JDLFFBQ0VDLEtBQU0sV0FDTk0sUUFBUyxRQUNUQyxJQUFLLEdBRVBOLFNBQVMsRUFDVEMsU0FDRUMsWUFBYWI7QUM5Q3pCWixRQUFRQyxPQUFPLDZCQUNaSyxXQUFXLG1CQUNULFNBQVMsaUJBQWlCLFNBQVMsVUFDbEMsU0FBU3dCLE9BQU9DLGVBQWVDLE9BQU9DLFNBRXhDSCxPQUFPSSxRQUFVLEdBQ2pCSixPQUFPSyxTQUFXLEdBRWxCTCxPQUFPRSxPQUFTQSxPQUNoQkYsT0FBT00sWUFBYyxtQ0FFckJOLE9BQU9PLFNBQVdOLGVBQWVKLG9CQUMvQlcsU0FBVU4sT0FBUSxLQUdwQkYsT0FBT1Msc0JBQXdCLFdBQzdCVCxPQUFPTyxTQUFXTixlQUFlSixvQkFDL0JXLFNBQVVSLE9BQU9RLFlBSXJCUixPQUFPVSxZQUFjLFNBQVNDLEtBQzVCWCxPQUFPUSxTQUFXRyxJQUNsQlgsT0FBT1MseUJBR1RULE9BQU9ZLGdCQUFrQixTQUFTQyxVQUNoQyxNQUFRQSxVQUFXYixPQUFPTSxZQUFjTyxTQUFXLE9BQVM7QUMzQmxFM0MsUUFBUUMsT0FBTyx5QkFFWjJDLE9BQU8sZUFBZ0IsVUFBVyxTQUFTQyxTQUMxQyxNQUFPLFVBQVNDLE1BQ2QsTUFBT0MsUUFBT0QsTUFBTUUsUUFBUSxnQkFBaUJILGFBSWhERCxPQUFPLGVBQWdCLFdBQ3RCLE1BQU8sVUFBVUssTUFBTUMsU0FDckIsTUFBUWxELFNBQVFtRCxZQUFZRixRQUFtQixJQUFUQSxNQUFlQyxRQUFVRDtBQ1ZyRWpELFFBQVFDLE9BQU8sNEJBQ1ptRCxVQUFVLGdCQUFnQixXQUN6QixPQUNFQyxPQUNFQyxlQUFnQixhQUNoQmpCLFNBQVUsaUJBR1poQyxZQUFhLHNCQUVia0QsS0FBTSxTQUFTRixNQUFPRyxRQUFTQyxPQUU3QkosTUFBTVgsZ0JBQWtCLFNBQVNDLFVBQy9CLE1BQVFBLFVBQVcsbUNBQXFDQSxTQUFXLE9BQVMsSUFHOUVVLE1BQU1LLFVBQVksU0FBVUMsTUFDMUIsTUFBTyxJQUFJQyxNQUFZLElBQVBEIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcCcsIFtcbiAgJ25nUm91dGUnLFxuICAnd2VhdGhlckFwcC5maWx0ZXJzJyxcbiAgJ3dlYXRoZXJBcHAuc2VydmljZXMnLFxuICAnd2VhdGhlckFwcC5kaXJlY3RpdmVzJyxcbiAgJ3dlYXRoZXJBcHAuY29udHJvbGxlcnMnLFxuICBcImlzby0zMTY2LWNvdW50cnktY29kZXNcIlxuXSkuXG5jb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9mb3JlY2FzdCcsIHt0ZW1wbGF0ZVVybDogJ2ZvcmVjYXN0Lmh0bWwnLCBjb250cm9sbGVyOiAnT3BlbldlYXRoZXJDdHJsJ30pO1xuICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvZm9yZWNhc3QnfSk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5zZXJ2aWNlcycsIFsnbmdSZXNvdXJjZSddKVxuICAudmFsdWUoJ2NpdGllcycsWydBbXN0ZXJkYW0nLCdMb25kb24nLCdCZXJsaW4nLCdQYXJpcycsJ01hZHJpZCddKVxuXG4gIC5mYWN0b3J5KCdvcGVuV2VhdGhlck1hcCcsIGZ1bmN0aW9uKCRyZXNvdXJjZSkge1xuXG4gICAgdmFyIGFwaUtleSA9ICcwZWNjZTE5MjUwMGQxYTcxZWIwNWQxZWY4MTUxNDdjYyc7XG4gICAgdmFyIGFwaUJhc2VVcmwgPSAnaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvJztcblxuICAgIHJldHVybiAkcmVzb3VyY2UoYXBpQmFzZVVybCArICc6cGF0aC86c3ViUGF0aD9xPTpsb2NhdGlvbicsXG4gICAgICB7XG4gICAgICAgIEFQUElEOiBhcGlLZXksXG4gICAgICAgIG1vZGU6ICdqc29uJyxcbiAgICAgICAgY2FsbGJhY2s6ICdKU09OX0NBTExCQUNLJyxcbiAgICAgICAgdW5pdHM6ICdtZXRyaWMnLFxuICAgICAgICBsYW5nOiAnZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBxdWVyeVdlYXRoZXI6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnd2VhdGhlcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBhcGlLZXlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5Rm9yZWNhc3Q6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnZm9yZWNhc3QnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAneC1hcGkta2V5JzogYXBpS2V5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBxdWVyeUZvcmVjYXN0RGFpbHk6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnZm9yZWNhc3QnLFxuICAgICAgICAgICAgc3ViUGF0aDogJ2RhaWx5JyxcbiAgICAgICAgICAgIGNudDogN1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNBcnJheTogZmFsc2UsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3gtYXBpLWtleSc6IGFwaUtleVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5jb250cm9sbGVycycsIFtdKVxuICAuY29udHJvbGxlcignT3BlbldlYXRoZXJDdHJsJyxcbiAgICBbJyRzY29wZScsJ29wZW5XZWF0aGVyTWFwJywnY2l0aWVzJywnSVNPMzE2NicsXG4gICAgICBmdW5jdGlvbigkc2NvcGUsb3BlbldlYXRoZXJNYXAsY2l0aWVzLElTTzMxNjYpIHtcblxuICAgICRzY29wZS5tZXNzYWdlID0gJyc7XG4gICAgJHNjb3BlLmhhc1N0YXRlID0gJyc7XG5cbiAgICAkc2NvcGUuY2l0aWVzID0gY2l0aWVzO1xuICAgICRzY29wZS5pY29uQmFzZVVybCA9ICdodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93Lyc7XG5cbiAgICAkc2NvcGUuZm9yZWNhc3QgPSBvcGVuV2VhdGhlck1hcC5xdWVyeUZvcmVjYXN0RGFpbHkoe1xuICAgICAgbG9jYXRpb246IGNpdGllc1sgMCBdXG4gICAgfSk7XG5cbiAgICAkc2NvcGUuZ2V0Rm9yZWNhc3RCeUxvY2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICAkc2NvcGUuZm9yZWNhc3QgPSBvcGVuV2VhdGhlck1hcC5xdWVyeUZvcmVjYXN0RGFpbHkoe1xuICAgICAgICBsb2NhdGlvbjogJHNjb3BlLmxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgJHNjb3BlLnNldExvY2F0aW9uID0gZnVuY3Rpb24obG9jKSB7XG4gICAgICAkc2NvcGUubG9jYXRpb24gPSBsb2M7XG4gICAgICAkc2NvcGUuZ2V0Rm9yZWNhc3RCeUxvY2F0aW9uKCk7XG4gICAgfTtcblxuICAgICRzY29wZS5nZXRJY29uSW1hZ2VVcmwgPSBmdW5jdGlvbihpY29uTmFtZSkge1xuICAgICAgcmV0dXJuIChpY29uTmFtZSA/ICRzY29wZS5pY29uQmFzZVVybCArIGljb25OYW1lICsgJy5wbmcnIDogJycpO1xuICAgIH07XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCd3ZWF0aGVyQXBwLmZpbHRlcnMnLCBbXSlcblxuICAuZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odGV4dCkge1xuICAgICAgcmV0dXJuIFN0cmluZyh0ZXh0KS5yZXBsYWNlKC9cXCVWRVJTSU9OXFwlL21nLCB2ZXJzaW9uKTtcbiAgICB9XG4gIH1dKVxuXG4gIC5maWx0ZXIoJ3BsYWNlaG9sZGVyJywgW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQscGh2YWx1ZSkge1xuICAgICAgcmV0dXJuIChhbmd1bGFyLmlzVW5kZWZpbmVkKGlucHV0KSB8fCBpbnB1dCA9PSAnJykgPyBwaHZhbHVlIDogaW5wdXQ7XG4gICAgfTtcbiAgfV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5kaXJlY3RpdmVzJywgW10pXG4gIC5kaXJlY3RpdmUoJ2ZvcmVjYXN0SXRlbScsW2Z1bmN0aW9uIGZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIHVzZURheUZvcmVjYXN0OiAnPXNob3dFbnRyeScsXG4gICAgICAgIGZvcmVjYXN0OiAnPWZvcmVjYXN0SXRlbSdcbiAgICAgIH0sXG5cbiAgICAgIHRlbXBsYXRlVXJsOiAnX2ZvcmVjYXN0LWl0ZW0uaHRtbCcsXG5cbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuXG4gICAgICAgIHNjb3BlLmdldEljb25JbWFnZVVybCA9IGZ1bmN0aW9uKGljb25OYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIChpY29uTmFtZSA/ICdodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93LycgKyBpY29uTmFtZSArICcucG5nJyA6ICcnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5wYXJzZURhdGUgPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lICogMTAwMCk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XSlcbiJdfQ==
