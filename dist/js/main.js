angular.module("weatherApp",["ngRoute","weatherApp.filters","weatherApp.services","weatherApp.directives","weatherApp.controllers","iso-3166-country-codes"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/forecast",{templateUrl:"forecast.html",controller:"OpenWeatherCtrl"}),$routeProvider.otherwise({redirectTo:"/forecast"})}]);
angular.module("weatherApp.services",["ngResource"]).value("cities",["Amsterdam, NL","London, UK","Berlin, DE","Paris, FR","Madrid, ES"]).factory("openWeatherMap",function($resource){var apiKey="0ecce192500d1a71eb05d1ef815147cc",apiBaseUrl="http://api.openweathermap.org/data/2.5/";return $resource(apiBaseUrl+":path/:subPath?q=:location",{APPID:apiKey,mode:"json",callback:"JSON_CALLBACK",units:"metric",lang:"en"},{queryWeather:{method:"JSONP",params:{path:"weather"},isArray:!1,headers:{"x-api-key":apiKey}},queryForecast:{method:"JSONP",params:{path:"forecast",cnt:5},isArray:!1,headers:{"x-api-key":apiKey}},queryForecastDaily:{method:"JSONP",params:{path:"forecast",subPath:"daily",cnt:7},isArray:!1,headers:{"x-api-key":apiKey}}})});
angular.module("weatherApp.controllers",[]).controller("OpenWeatherCtrl",["$scope","openWeatherMap","cities",function($scope,openWeatherMap,cities){$scope.message="",$scope.cities=cities,$scope.forecast=openWeatherMap.queryForecast({location:cities[0]}),$scope.currentWeather=openWeatherMap.queryWeather({location:cities[0]}),$scope.getForecastByLocation=function(){$scope.forecast=openWeatherMap.queryForecast({location:$scope.location}),$scope.currentWeather=openWeatherMap.queryWeather({location:$scope.location})},$scope.setLocation=function(loc){$scope.location=loc,$scope.getForecastByLocation()}}]);
angular.module("weatherApp.filters",[]).filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}}]).filter("placeholder",[function(){return function(input,phvalue){return angular.isUndefined(input)||""==input?phvalue:input}}]);
angular.module("weatherApp.directives",[]).directive("forecastItem",[function(){return{scope:{useDayForecast:"=showEntry",forecast:"=forecastItem"},templateUrl:"_forecast-item.html",link:function(scope,element,attrs){scope.isNine=function(dt_txt){return _.includes(dt_txt,"09:00")},scope.calculateSeaRise=function(sea,ground){if(sea-ground>0){var positiveNumber="+"+(sea-ground).toString();return positiveNumber}return sea-ground}}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
