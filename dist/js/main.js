angular.module("weatherApp",["ngRoute","weatherApp.filters","weatherApp.services","weatherApp.directives","weatherApp.controllers","iso-3166-country-codes"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/forecast",{templateUrl:"forecast.html",controller:"OpenWeatherCtrl"}),$routeProvider.otherwise({redirectTo:"/forecast"})}]);
angular.module("weatherApp.services",["ngResource"]).value("cities",["Amsterdam, NL","London, UK","Berlin, DE","Paris, FR","Madrid, ES"]).factory("openWeatherMap",function($resource){var apiKey="0ecce192500d1a71eb05d1ef815147cc",apiBaseUrl="http://api.openweathermap.org/data/2.5/";return $resource(apiBaseUrl+":path/:subPath?q=:location",{APPID:apiKey,mode:"json",callback:"JSON_CALLBACK",units:"metric",lang:"en"},{queryWeather:{method:"JSONP",params:{path:"weather"},isArray:!1,headers:{"x-api-key":apiKey}},queryForecast:{method:"JSONP",params:{path:"forecast",cnt:5},isArray:!1,headers:{"x-api-key":apiKey}},queryForecastDaily:{method:"JSONP",params:{path:"forecast",subPath:"daily",cnt:7},isArray:!1,headers:{"x-api-key":apiKey}}})});
angular.module("weatherApp.controllers",[]).controller("OpenWeatherCtrl",["$scope","openWeatherMap","cities",function($scope,openWeatherMap,cities){$scope.message="",$scope.hasState="",$scope.cities=cities,$scope.forecast=openWeatherMap.queryForecast({location:cities[0]}),$scope.currentWeather=openWeatherMap.queryWeather({location:cities[0]}),$scope.getForecastByLocation=function(){$scope.forecast=openWeatherMap.queryForecast({location:$scope.location}),$scope.currentWeather=openWeatherMap.queryWeather({location:$scope.location})},$scope.setLocation=function(loc){$scope.location=loc,$scope.getForecastByLocation()}}]);
angular.module("weatherApp.filters",[]).filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}}]).filter("placeholder",[function(){return function(input,phvalue){return angular.isUndefined(input)||""==input?phvalue:input}}]);
angular.module("weatherApp.directives",[]).directive("forecastItem",[function(){return{scope:{useDayForecast:"=showEntry",forecast:"=forecastItem"},templateUrl:"_forecast-item.html",link:function(scope,element,attrs){scope.isNine=function(dt_txt){return _.includes(dt_txt,"09:00")}}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInNlcnZpY2VzLmpzIiwiY29udHJvbGxlcnMuanMiLCJmaWx0ZXJzLmpzIiwiZGlyZWN0aXZlcy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsInZhbHVlIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsImFwaUtleSIsImFwaUJhc2VVcmwiLCJBUFBJRCIsIm1vZGUiLCJjYWxsYmFjayIsInVuaXRzIiwibGFuZyIsInF1ZXJ5V2VhdGhlciIsIm1ldGhvZCIsInBhcmFtcyIsInBhdGgiLCJpc0FycmF5IiwiaGVhZGVycyIsIngtYXBpLWtleSIsInF1ZXJ5Rm9yZWNhc3QiLCJjbnQiLCJxdWVyeUZvcmVjYXN0RGFpbHkiLCJzdWJQYXRoIiwiJHNjb3BlIiwib3BlbldlYXRoZXJNYXAiLCJjaXRpZXMiLCJtZXNzYWdlIiwiaGFzU3RhdGUiLCJmb3JlY2FzdCIsImxvY2F0aW9uIiwiY3VycmVudFdlYXRoZXIiLCJnZXRGb3JlY2FzdEJ5TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsImxvYyIsImZpbHRlciIsInZlcnNpb24iLCJ0ZXh0IiwiU3RyaW5nIiwicmVwbGFjZSIsImlucHV0IiwicGh2YWx1ZSIsImlzVW5kZWZpbmVkIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJ1c2VEYXlGb3JlY2FzdCIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJpc05pbmUiLCJkdF90eHQiLCJfIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFRQyxPQUFPLGNBQ2IsVUFDQSxxQkFDQSxzQkFDQSx3QkFDQSx5QkFDQSwyQkFFRkMsUUFBUSxpQkFBa0IsU0FBU0MsZ0JBQ2pDQSxlQUFlQyxLQUFLLGFBQWNDLFlBQWEsZ0JBQWlCQyxXQUFZLG9CQUM1RUgsZUFBZUksV0FBV0MsV0FBWTtBQ1Z4Q1IsUUFBUUMsT0FBTyx1QkFBd0IsZUFDcENRLE1BQU0sVUFBVSxnQkFBZ0IsYUFBYSxhQUFhLFlBQVksZUFFdEVDLFFBQVEsaUJBQWtCLFNBQVNDLFdBRWxDLEdBQUlDLFFBQVMsbUNBQ1RDLFdBQWEseUNBRWpCLE9BQU9GLFdBQVVFLFdBQWEsOEJBRTFCQyxNQUFPRixPQUNQRyxLQUFNLE9BQ05DLFNBQVUsZ0JBQ1ZDLE1BQU8sU0FDUEMsS0FBTSxPQUdOQyxjQUNFQyxPQUFRLFFBQ1JDLFFBQ0VDLEtBQU0sV0FFUkMsU0FBUyxFQUNUQyxTQUNFQyxZQUFhYixTQUdqQmMsZUFDRU4sT0FBUSxRQUNSQyxRQUNFQyxLQUFNLFdBQ05LLElBQUssR0FFUEosU0FBUyxFQUNUQyxTQUNFQyxZQUFhYixTQUdqQmdCLG9CQUNFUixPQUFRLFFBQ1JDLFFBQ0VDLEtBQU0sV0FDTk8sUUFBUyxRQUNURixJQUFLLEdBRVBKLFNBQVMsRUFDVEMsU0FDRUMsWUFBYWI7QUMvQ3pCWixRQUFRQyxPQUFPLDZCQUNaSyxXQUFXLG1CQUNULFNBQVMsaUJBQWlCLFNBQ3pCLFNBQVN3QixPQUFPQyxlQUFlQyxRQUVqQ0YsT0FBT0csUUFBVSxHQUNqQkgsT0FBT0ksU0FBVyxHQUVsQkosT0FBT0UsT0FBU0EsT0FHaEJGLE9BQU9LLFNBQVdKLGVBQWVMLGVBQy9CVSxTQUFVSixPQUFRLEtBSXBCRixPQUFPTyxlQUFpQk4sZUFBZVosY0FDckNpQixTQUFVSixPQUFRLEtBR3BCRixPQUFPUSxzQkFBd0IsV0FDN0JSLE9BQU9LLFNBQVdKLGVBQWVMLGVBQy9CVSxTQUFVTixPQUFPTSxXQUVuQk4sT0FBT08sZUFBaUJOLGVBQWVaLGNBQ3JDaUIsU0FBVU4sT0FBT00sWUFLckJOLE9BQU9TLFlBQWMsU0FBU0MsS0FDNUJWLE9BQU9NLFNBQVdJLElBQ2xCVixPQUFPUTtBQ2hDYnRDLFFBQVFDLE9BQU8seUJBRVp3QyxPQUFPLGVBQWdCLFVBQVcsU0FBU0MsU0FDMUMsTUFBTyxVQUFTQyxNQUNkLE1BQU9DLFFBQU9ELE1BQU1FLFFBQVEsZ0JBQWlCSCxhQUloREQsT0FBTyxlQUFnQixXQUN0QixNQUFPLFVBQVVLLE1BQU1DLFNBQ3JCLE1BQVEvQyxTQUFRZ0QsWUFBWUYsUUFBbUIsSUFBVEEsTUFBZUMsUUFBVUQ7QUNWckU5QyxRQUFRQyxPQUFPLDRCQUNaZ0QsVUFBVSxnQkFBZ0IsV0FDekIsT0FDRUMsT0FDRUMsZUFBZ0IsYUFDaEJoQixTQUFVLGlCQUdaOUIsWUFBYSxzQkFFYitDLEtBQU0sU0FBU0YsTUFBT0csUUFBU0MsT0FDN0JKLE1BQU1LLE9BQVMsU0FBU0MsUUFDdEIsTUFBT0MsR0FBRUMsU0FBU0YsT0FBUSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ3dlYXRoZXJBcHAnLCBbXG4gICduZ1JvdXRlJyxcbiAgJ3dlYXRoZXJBcHAuZmlsdGVycycsXG4gICd3ZWF0aGVyQXBwLnNlcnZpY2VzJyxcbiAgJ3dlYXRoZXJBcHAuZGlyZWN0aXZlcycsXG4gICd3ZWF0aGVyQXBwLmNvbnRyb2xsZXJzJyxcbiAgXCJpc28tMzE2Ni1jb3VudHJ5LWNvZGVzXCJcbl0pLlxuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlci53aGVuKCcvZm9yZWNhc3QnLCB7dGVtcGxhdGVVcmw6ICdmb3JlY2FzdC5odG1sJywgY29udHJvbGxlcjogJ09wZW5XZWF0aGVyQ3RybCd9KTtcbiAgJHJvdXRlUHJvdmlkZXIub3RoZXJ3aXNlKHtyZWRpcmVjdFRvOiAnL2ZvcmVjYXN0J30pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3dlYXRoZXJBcHAuc2VydmljZXMnLCBbJ25nUmVzb3VyY2UnXSlcbiAgLnZhbHVlKCdjaXRpZXMnLFsnQW1zdGVyZGFtLCBOTCcsJ0xvbmRvbiwgVUsnLCdCZXJsaW4sIERFJywnUGFyaXMsIEZSJywnTWFkcmlkLCBFUyddKVxuXG4gIC5mYWN0b3J5KCdvcGVuV2VhdGhlck1hcCcsIGZ1bmN0aW9uKCRyZXNvdXJjZSkge1xuXG4gICAgdmFyIGFwaUtleSA9ICcwZWNjZTE5MjUwMGQxYTcxZWIwNWQxZWY4MTUxNDdjYyc7XG4gICAgdmFyIGFwaUJhc2VVcmwgPSAnaHR0cDovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvJztcblxuICAgIHJldHVybiAkcmVzb3VyY2UoYXBpQmFzZVVybCArICc6cGF0aC86c3ViUGF0aD9xPTpsb2NhdGlvbicsXG4gICAgICB7XG4gICAgICAgIEFQUElEOiBhcGlLZXksXG4gICAgICAgIG1vZGU6ICdqc29uJyxcbiAgICAgICAgY2FsbGJhY2s6ICdKU09OX0NBTExCQUNLJyxcbiAgICAgICAgdW5pdHM6ICdtZXRyaWMnLFxuICAgICAgICBsYW5nOiAnZW4nXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBxdWVyeVdlYXRoZXI6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnd2VhdGhlcidcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBhcGlLZXlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5Rm9yZWNhc3Q6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnZm9yZWNhc3QnLFxuICAgICAgICAgICAgY250OiA1XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpc0FycmF5OiBmYWxzZSxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAneC1hcGkta2V5JzogYXBpS2V5XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBxdWVyeUZvcmVjYXN0RGFpbHk6IHtcbiAgICAgICAgICBtZXRob2Q6ICdKU09OUCcsXG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICBwYXRoOiAnZm9yZWNhc3QnLFxuICAgICAgICAgICAgc3ViUGF0aDogJ2RhaWx5JyxcbiAgICAgICAgICAgIGNudDogN1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaXNBcnJheTogZmFsc2UsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ3gtYXBpLWtleSc6IGFwaUtleVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnd2VhdGhlckFwcC5jb250cm9sbGVycycsIFtdKVxuICAuY29udHJvbGxlcignT3BlbldlYXRoZXJDdHJsJyxcbiAgICBbJyRzY29wZScsJ29wZW5XZWF0aGVyTWFwJywnY2l0aWVzJyxcbiAgICAgIGZ1bmN0aW9uKCRzY29wZSxvcGVuV2VhdGhlck1hcCxjaXRpZXMpIHtcblxuICAgICRzY29wZS5tZXNzYWdlID0gJyc7XG4gICAgJHNjb3BlLmhhc1N0YXRlID0gJyc7XG5cbiAgICAkc2NvcGUuY2l0aWVzID0gY2l0aWVzO1xuXG4gICAgLy8gR2V0IGRhaWx5IGZvcmVjYXN0IGZvciBpbml0aWFsIHBhZ2VcbiAgICAkc2NvcGUuZm9yZWNhc3QgPSBvcGVuV2VhdGhlck1hcC5xdWVyeUZvcmVjYXN0KHtcbiAgICAgIGxvY2F0aW9uOiBjaXRpZXNbIDAgXVxuICAgIH0pO1xuXG4gICAgLy8gJHNjb3BlLmZvcmVjYXN0LmN1cnJlbnRXZWF0aGVyID0gXCJhaG95XCI7XG4gICAgJHNjb3BlLmN1cnJlbnRXZWF0aGVyID0gb3BlbldlYXRoZXJNYXAucXVlcnlXZWF0aGVyKHtcbiAgICAgIGxvY2F0aW9uOiBjaXRpZXNbIDAgXVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLmdldEZvcmVjYXN0QnlMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLmZvcmVjYXN0ID0gb3BlbldlYXRoZXJNYXAucXVlcnlGb3JlY2FzdCh7XG4gICAgICAgIGxvY2F0aW9uOiAkc2NvcGUubG9jYXRpb25cbiAgICAgIH0pO1xuICAgICAgJHNjb3BlLmN1cnJlbnRXZWF0aGVyID0gb3BlbldlYXRoZXJNYXAucXVlcnlXZWF0aGVyKHtcbiAgICAgICAgbG9jYXRpb246ICRzY29wZS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIENoYW5nZSBjdXJyZW50IGxvY2F0aW9uIG9uIGJ1dHRvbnMgY2xpY2tzXG4gICAgJHNjb3BlLnNldExvY2F0aW9uID0gZnVuY3Rpb24obG9jKSB7XG4gICAgICAkc2NvcGUubG9jYXRpb24gPSBsb2M7XG4gICAgICAkc2NvcGUuZ2V0Rm9yZWNhc3RCeUxvY2F0aW9uKCk7XG4gICAgfTtcbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ3dlYXRoZXJBcHAuZmlsdGVycycsIFtdKVxuXG4gIC5maWx0ZXIoJ2ludGVycG9sYXRlJywgWyd2ZXJzaW9uJywgZnVuY3Rpb24odmVyc2lvbikge1xuICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICByZXR1cm4gU3RyaW5nKHRleHQpLnJlcGxhY2UoL1xcJVZFUlNJT05cXCUvbWcsIHZlcnNpb24pO1xuICAgIH1cbiAgfV0pXG5cbiAgLmZpbHRlcigncGxhY2Vob2xkZXInLCBbZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCxwaHZhbHVlKSB7XG4gICAgICByZXR1cm4gKGFuZ3VsYXIuaXNVbmRlZmluZWQoaW5wdXQpIHx8IGlucHV0ID09ICcnKSA/IHBodmFsdWUgOiBpbnB1dDtcbiAgICB9O1xuICB9XSlcbiIsImFuZ3VsYXIubW9kdWxlKCd3ZWF0aGVyQXBwLmRpcmVjdGl2ZXMnLCBbXSlcbiAgLmRpcmVjdGl2ZSgnZm9yZWNhc3RJdGVtJyxbZnVuY3Rpb24gZmFjdG9yeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2NvcGU6IHtcbiAgICAgICAgdXNlRGF5Rm9yZWNhc3Q6ICc9c2hvd0VudHJ5JyxcbiAgICAgICAgZm9yZWNhc3Q6ICc9Zm9yZWNhc3RJdGVtJyxcbiAgICAgIH0sXG5cbiAgICAgIHRlbXBsYXRlVXJsOiAnX2ZvcmVjYXN0LWl0ZW0uaHRtbCcsXG5cbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS5pc05pbmUgPSBmdW5jdGlvbihkdF90eHQpe1xuICAgICAgICAgIHJldHVybiBfLmluY2x1ZGVzKGR0X3R4dCwgJzA5OjAwJylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKVxuIl19
